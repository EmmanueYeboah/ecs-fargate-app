name: Docker Build & Push to ECR

on:
  workflow_run:
    workflows: ["Terraform Deploy"]  
    types:
      - completed

permissions:
  id-token: write
  contents: read

jobs:
  docker-build-push:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::791608741362:role/GitHubActionsTerraformRole
          aws-region: us-east-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Get ECR login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image variables
        run: |
          ECR_REPO=$(terraform -chdir=terraform output -raw ecr_repository_url)
          echo "ECR_REPO=$ECR_REPO" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_SHA:0:8}" >> $GITHUB_ENV
          echo "CLUSTER_NAME=$(terraform -chdir=terraform output -raw ecs_cluster_name)" >> $GITHUB_ENV
          echo "SERVICE_NAME=$(terraform -chdir=terraform output -raw ecs_service_name)" >> $GITHUB_ENV
          echo "Debug: ECR_REPO=$ECR_REPO"
          echo "Debug: IMAGE_TAG=${GITHUB_SHA:0:8}"

      - name: Build Docker image
        run: |
          docker build -t $ECR_REPO:$IMAGE_TAG -t $ECR_REPO:latest ./application

      - name: Scan image for vulnerabilities
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $HOME/Library/Caches:/root/.cache/ \
            aquasec/trivy:latest image --exit-code 0 --severity HIGH,CRITICAL $ECR_REPO:$IMAGE_TAG

      - name: Push Docker image
        run: |
          docker push $ECR_REPO:$IMAGE_TAG
          docker push $ECR_REPO:latest

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --force-new-deployment
          echo "Deployment initiated. Check ECS console for status."
